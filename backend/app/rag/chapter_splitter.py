# Copyright 2025 Antimortine
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import asyncio
from llama_index.core.indices.vector_store import VectorStoreIndex
from llama_index.core.llms import LLM
from llama_index.core.tools import FunctionTool
from llama_index.core.agent import ReActAgent
from llama_index.core.base.llms.types import ChatMessage, MessageRole
from pydantic import ValidationError, TypeAdapter # Import TypeAdapter for list validation

from typing import List, Optional

from app.models.ai import ProposedScene, ProposedSceneList

logger = logging.getLogger(__name__)

# --- Create a TypeAdapter for validating the list of ProposedScene ---
ProposedSceneListAdapter = TypeAdapter(List[ProposedScene])

class ChapterSplitter:
    """Handles the logic for splitting chapter text into proposed scenes using an LLM."""

    def __init__(self, index: VectorStoreIndex, llm: LLM):
        if not llm:
             raise ValueError("ChapterSplitter requires a valid LLM instance.")
        self.llm = llm
        logger.info("ChapterSplitter initialized.")

    async def split(
        self,
        project_id: str,
        chapter_id: str,
        chapter_content: str,
        explicit_plan: str,
        explicit_synopsis: str,
        ) -> List[ProposedScene]:
        logger.info(f"ChapterSplitter: Starting split for chapter '{chapter_id}' in project '{project_id}'.")

        if not chapter_content.strip():
            logger.warning("Chapter content is empty, cannot split.")
            return []

        self._tool_result_storage = {"scenes": None}

        # --- Define the Tool ---
        # --- MODIFIED: Use **kwargs and validate inside ---
        def save_proposed_scenes(**kwargs):
            """
            Receives the proposed scenes generated by the AI.
            Validates the input structure and stores the result.
            Returns a confirmation string.
            The expected keyword argument is 'proposed_scenes', containing a list of scene objects.
            """
            logger.debug(f"Tool 'save_proposed_scenes' called by agent with kwargs: {kwargs}")
            proposed_scenes_data = kwargs.get("proposed_scenes")

            if proposed_scenes_data is None:
                 logger.error("Tool 'save_proposed_scenes' did not receive 'proposed_scenes' keyword argument.")
                 raise ValueError("Tool did not receive expected 'proposed_scenes' data.")

            try:
                # Validate the received list data against the ProposedScene model
                validated_scenes = ProposedSceneListAdapter.validate_python(proposed_scenes_data)
                # Store the validated list directly
                self._tool_result_storage["scenes"] = validated_scenes
                confirmation_message = f"Successfully validated and stored {len(validated_scenes)} proposed scenes."
                logger.debug(f"Tool returning confirmation: '{confirmation_message}'")
                return confirmation_message
            except ValidationError as e:
                 logger.error(f"Pydantic validation failed inside tool function: {e}. Data: {proposed_scenes_data}")
                 # Return an error message string to the agent
                 return f"Error: Validation failed for proposed scenes data. Details: {e}"
        # --- END MODIFIED ---

        scene_list_tool = FunctionTool.from_defaults(
            fn=save_proposed_scenes,
            name="save_proposed_scenes",
            description="Saves the list of proposed scenes (title and content) extracted from chapter text.",
            # --- Use Pydantic model for schema generation for the LLM ---
            fn_schema=ProposedSceneList
        )

        # --- Construct the Input for the Agent ---
        agent_input = (
            f"Analyze the following chapter content (from chapter ID '{chapter_id}') and split it into distinct scenes. "
            "Identify scene breaks based on significant shifts in time, location, point-of-view character, topic, or the start/end of major dialogue exchanges. "
            "For each scene identified, provide a concise suggested title (less than 50 characters) and the full Markdown content belonging to that scene.\n\n"
            "Use the provided Project Plan and Synopsis for context on the overall story.\n\n"
            f"**Project Plan:**\n```markdown\n{explicit_plan or 'Not Available'}\n```\n\n"
            f"**Project Synopsis:**\n```markdown\n{explicit_synopsis or 'Not Available'}\n```\n\n"
            f"**Full Chapter Content to Split:**\n```markdown\n{chapter_content}\n```\n\n"
            "**Instruction:** Call the 'save_proposed_scenes' function with the complete list of proposed scenes. The function expects a single argument named 'proposed_scenes' which is a list of scene objects (each having 'suggested_title' and 'content'). Ensure the 'content' field contains the exact Markdown text for that segment and that the segments cover the original chapter without overlap or gaps."
        )

        # --- Initialize and Run the Agent ---
        logger.info("Initializing ReActAgent for chapter splitting...")
        try:
            agent_system_prompt = (
                 "You are an agent specialized in analyzing and structuring narrative text. "
                 "Your goal is to use the available tools to process the user's request accurately."
            )
            agent = ReActAgent.from_tools(
                tools=[scene_list_tool],
                llm=self.llm,
                verbose=True,
                system_prompt=agent_system_prompt
            )

            logger.info("Running agent chat for chapter splitting...")
            agent_response = await agent.achat(agent_input)
            logger.debug(f"Agent final response content: {agent_response.response}")

            # --- Check instance storage ---
            if self._tool_result_storage["scenes"] is None:
                 logger.error("Agent finished but did not successfully store tool results.")
                 error_detail = "Agent failed to execute the tool correctly or store results."
                 if agent_response.response:
                      error_detail += f" Agent response: {agent_response.response[:200]}..."
                 # Check if the tool output itself contained an error message
                 tool_outputs = [node.raw_output for node in agent_response.source_nodes if hasattr(node, 'raw_output')]
                 if tool_outputs and isinstance(tool_outputs[0], str) and tool_outputs[0].startswith("Error:"):
                      error_detail = f"Tool execution failed: {tool_outputs[0]}"

                 raise ValueError(error_detail)

            # --- Result is now directly the validated list ---
            proposed_scenes_list = self._tool_result_storage["scenes"]

            # Type check just in case validation was bypassed somehow (shouldn't happen)
            if not isinstance(proposed_scenes_list, list):
                 logger.error(f"Stored tool result has unexpected type: {type(proposed_scenes_list)}. Result: {proposed_scenes_list}")
                 raise TypeError(f"Internal error: Stored tool result has unexpected type {type(proposed_scenes_list)}.")

            # Further check if list items are ProposedScene (optional, Pydantic should ensure this)
            # if proposed_scenes_list and not isinstance(proposed_scenes_list[0], ProposedScene):
            #      logger.error(f"Stored list items have unexpected type: {type(proposed_scenes_list[0])}")
            #      raise TypeError("Internal error: Stored list items have unexpected type.")


            if not proposed_scenes_list:
                 logger.warning("Agent successfully called the tool, but the proposed scenes list was empty.")
                 return []

            # --- Basic Content Validation ---
            concatenated_content = "".join(scene.content for scene in proposed_scenes_list)
            if len(concatenated_content.strip()) < len(chapter_content.strip()) * 0.8:
                 logger.warning(f"Concatenated content length ({len(concatenated_content)}) significantly differs from original ({len(chapter_content)}). Potential content loss during split.")

            logger.info(f"Successfully extracted and validated {len(proposed_scenes_list)} proposed scenes via ReActAgent tool call.")
            return proposed_scenes_list

        except Exception as e:
            logger.error(f"Error during chapter splitting via ReActAgent for chapter '{chapter_id}': {e}", exc_info=True)
            raise RuntimeError(f"Failed to split chapter due to Agent or LLM error: {e}") from e
        finally:
             self._tool_result_storage = {"scenes": None}